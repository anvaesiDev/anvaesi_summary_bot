import logging
import re
import time
import urllib.parse
import requests
import yt_dlp
import openai
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from telegram.constants import ParseMode
from telegraph import Telegraph
import io
from bs4 import BeautifulSoup, NavigableString, Tag
from youtube_transcript_api import YouTubeTranscriptApi

# Monkey patch –¥–ª—è youtube_transcript_api: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π User-Agent, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–π –±—Ä–∞—É–∑–µ—Ä
import youtube_transcript_api._api as yt_api
def patched_make_request(url, params=None, proxies=None):
    headers = {
        'User-Agent': ('Mozilla/5.0 (Windows NT 10.0; Win64; x64) '
                       'AppleWebKit/537.36 (KHTML, like Gecko) '
                       'Chrome/92.0.4515.107 Safari/537.36')
    }
    response = requests.get(url, params=params, headers=headers, proxies=proxies)
    response.raise_for_status()
    return response.text
yt_api._make_request = patched_make_request

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegraph —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º access_token
telegraph = Telegraph(
    access_token="97c85721eb376ac68cd430907a7f48d3688ca22b3d4feed45e17a899ac40"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI API
openai.api_base = "https://openrouter.ai/api/v1"
openai.api_key = "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"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è video_id –∏–∑ URL
def extract_video_id(url: str) -> str | None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ youtube –¥–æ–º–µ–Ω–∞
    if "youtube.com" not in url and "youtu.be" not in url:
        return None
    match = re.search(r'youtu\.be/([^?&]+)', url)
    if match:
        return match.group(1)
    parsed = urllib.parse.urlparse(url)
    query = urllib.parse.parse_qs(parsed.query)
    if "v" in query:
        return query["v"][0]
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–º–∞—Ä–∏
def process_video(video_url: str) -> list:
    video_id = extract_video_id(video_url)
    if not video_id:
        return ["–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ.", ""]

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ yt_dlp
    try:
        ydl_opts = {
            'skip_download': True,
            'quiet': True,
        }
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(video_url, download=False)
        video_title = info.get('title')
        if not video_title:
            return ["–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ.", ""]
    except Exception as e:
        return ["–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ.", ""]

    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤–∏–¥–µ–æ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ: —Å–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä—É—Å—Å–∫–∏–π, –∏–Ω–∞—á–µ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
    try:
        transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)
        try:
            transcript = transcript_list.find_transcript(['ru'])
        except Exception:
            # –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤
            available_langs = [t.language_code for t in transcript_list]
            transcript = transcript_list.find_transcript(available_langs)
        transcript_segments = transcript.fetch()
        transcript_text = " ".join(segment["text"] for segment in transcript_segments)
    except Exception as e:
        return [f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {e}", video_title]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –¥–ª—è HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
    prompt = f"""–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –≤–∏–¥–µ–æ–∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–∏–∂–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ YouTube‚Äë–≤–∏–¥–µ–æ —Å–æ—Å—Ç–∞–≤—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏ –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏, –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ Telegra.ph —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML-—Ä–∞–∑–º–µ—Ç–∫–∏.

–í–ù–ò–ú–ê–ù–ò–ï:
1. –î–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–≥–∏ <b>—Ç–µ–∫—Å—Ç</b>.
2. –î–ª—è –∫—É—Ä—Å–∏–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–≥–∏ <i>—Ç–µ–∫—Å—Ç</i>.
3. –î–ª—è –∑–∞—á—ë—Ä–∫–Ω—É—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–≥–∏ <s>—Ç–µ–∫—Å—Ç</s>.
4. –î–ª—è –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–≥–∏ <u>—Ç–µ–∫—Å—Ç</u>.
5. –î–ª—è –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–≥–∏ <code>—Ç–µ–∫—Å—Ç</code>.
6. –î–ª—è –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç:
<pre><code class="language-python">
–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–ª–æ–∫ –∫–æ–¥–∞ –Ω–∞ —è–∑—ã–∫–µ Python
</code></pre>
7. –¢–∞–∫–∂–µ –≤–æ–∑–º–æ–∂–Ω—ã –≤–∞—Ä–∏–∞—Ü–∏–∏: –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, <b><i>–ñ–∏—Ä–Ω—ã–π –Ω–∞–∫–ª–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</i></b> –∏–ª–∏ <i><u>–ù–∞–∫–ª–æ–Ω–Ω—ã–π –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç</u></i>, –∏–ª–∏ <b><i><u>–ñ–∏—Ä–Ω—ã–π –Ω–∞–∫–ª–æ–Ω–Ω—ã–π –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç</u></i></b>.
8. –î–ª—è —Å–ø–æ–π–ª–µ—Ä–æ–≤ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–≥ <span style="background-color:#000; color:#000;">—Ç–µ–∫—Å—Ç</span>.
9. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–≥–∏ <h1> –∏ –ø–æ–¥–æ–±–Ω—ã–µ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫, –ø—Ä–æ—Å—Ç–æ —Å–¥–µ–ª–∞–π –µ–≥–æ –∂–∏—Ä–Ω—ã–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.
10. –ò—Å–ø–æ–ª—å–∑—É–π —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –≤—Ä–æ–¥–µ ‚Ä¢ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Ö —ç–∫—Ä–∞–Ω–∏—Ä—É–π, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è).
11. –ù–µ –¥–æ–±–∞–≤–ª—è–π –≤ —Ç–µ–∫—Å—Ç –Ω–∏—á–µ–≥–æ, –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ —Å–∞–º–º–∞—Ä–∏, –Ω–µ –¥–æ–±–∞–≤–ª—è–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π –∏ –ø—Ä–æ—á–µ–≥–æ, —Ç–æ–ª—å–∫–æ —Å–∞–º–º–∞—Ä–∏.
12. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∞–º–º–∞—Ä–∏:
   ‚Ä¢ <b>üí° –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã</b>: –ü–µ—Ä–µ—á–∏—Å–ª–∏ –≤—Å–µ –∑–Ω–∞—á–∏–º—ã–µ –∏–¥–µ–∏ –∏ –º–æ–º–µ–Ω—Ç—ã –≤–∏–¥–µ–æ. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –≤–∏–¥–µ–æ —É–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ, —Å–æ—Ö—Ä–∞–Ω–∏ —ç—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç. –ù–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π—Å—è –∫–∞–∫–∏–º-–ª–∏–±–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—É–Ω–∫—Ç–æ–≤ ‚Äì –≤—ã–≤–µ–¥–∏ –≤—Å–µ –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ. –ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–π –∏–¥–µ–∏. –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–π –∫–∞–∫–∏–µ-—Ç–æ –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ —Å –ø–æ–º–æ—â—å—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
   ‚Ä¢ <b>üìö –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è</b>: –ï—Å–ª–∏ –≤ –≤–∏–¥–µ–æ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è —Å–ª–æ–∂–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∏–ª–∏ –ø–æ–Ω—è—Ç–∏—è, –∫—Ä–∞—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏–µ.
   ‚Ä¢ <b>üìù –í—ã–≤–æ–¥</b>: 3‚Äì5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∏—Ç–æ–≥–∞–º–∏.
13. –ò—Å–ø–æ–ª—å–∑—É–π –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ —Å–º—ã—Å–ª—É –≤–∏–¥–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –Ω–µ –±—ã–ª –ø—Ä–æ—Å—Ç–æ —Å—Ç–µ–Ω–æ–π, –∞ —á–∏—Ç–∞–ª—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–Ω—è—Ç–Ω–æ.
14. –¢—ã –û–ë–Ø–ó–ê–ù –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ```html``` –≤ —Å–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ. –ü–ï–†–ï–ü–†–û–í–ï–†–¨ –≠–¢–û –î–í–ê–ñ–î–´.
<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ:</b> {video_title}

<b>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤–∏–¥–µ–æ:</b> {transcript_text}
"""

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º–º–∞—Ä–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å "choices"
    try:
        max_attempts = 3
        attempt = 0
        while attempt < max_attempts:
            try:
                response = openai.ChatCompletion.create(
                    model="google/gemini-2.0-flash-lite-preview-02-05:free",
                    messages=[{"role": "user", "content": prompt}]
                )
                break  # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            except Exception as e:
                if "choices" in str(e):
                    attempt += 1
                    time.sleep(5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                else:
                    raise e
        else:
            return [f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –ò–ò: {e}", video_title]
        summary = response.choices[0].message.content
    except Exception as e:
        return [f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –ò–ò: {e}", video_title]

    # –£–¥–∞–ª—è–µ–º –æ–±—ë—Ä—Ç–∫–∏ ```html``` –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    summary = re.sub(r"```html\s*", "", summary)
    summary = re.sub(r"\s*```", "", summary)

    return [summary, video_title]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è HTML –≤ —É–∑–ª—ã, –ø–æ–Ω—è—Ç–Ω—ã–µ Telegra.ph
def html_to_telegraph_nodes(html: str) -> list:
    soup = BeautifulSoup(html, "html.parser")

    def convert_element(element):
        if isinstance(element, NavigableString):
            text = str(element)
            return text if text.strip() else None
        elif isinstance(element, Tag):
            node = {"tag": element.name}
            children = []
            for child in element.children:
                converted = convert_element(child)
                if converted is not None:
                    if isinstance(converted, list):
                        children.extend(converted)
                    else:
                        children.append(converted)
            if children:
                node["children"] = children
            return node
        return None

    root = soup.body if soup.body else soup
    nodes = []
    for child in root.contents:
        conv = convert_element(child)
        if conv:
            nodes.append(conv)
    return nodes

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ, –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –µ–≥–æ —Å–∞–º–º–∞—Ä–∏."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–∂–∏–¥–∞–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    video_url = update.message.text.strip()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∞ —è–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–æ–π –Ω–∞ YouTube
    if not (video_url.startswith("http") and extract_video_id(video_url)):
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ.")
        return

    processing_msg = await update.message.reply_text(
        "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ, –ø–æ–¥–æ–∂–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞...")
    try:
        summary_and_title = process_video(video_url)
        summary = summary_and_title[0]
        video_title = summary_and_title[1]
        if summary.startswith("–û—à–∏–±–∫–∞") or summary.startswith("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞"):
            await update.message.reply_text(summary)
            return

        nodes = html_to_telegraph_nodes(summary)

        try:
            page = telegraph.create_page(title=f"{video_title}",
                                         author_name="anvaesi_summary_bot",
                                         content=nodes)
            page_url = page['url']
            await update.message.reply_text(
                f"–°–∞–º–º–∞—Ä–∏ –≤–∏–¥–µ–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–∞ Telegra.ph:\n{page_url}")
        except Exception as e:
            max_length = 4000
            if len(summary) > max_length:
                for i in range(0, len(summary), max_length):
                    chunk = summary[i:i + max_length]
                    await update.message.reply_text(chunk,
                                                    parse_mode=ParseMode.HTML)
            else:
                await update.message.reply_text(summary,
                                                parse_mode=ParseMode.HTML)
    finally:
        await processing_msg.delete()

def main() -> None:
    telegram_token = "7740753488:AAEmlrqxkd9p8NvcuofolfBLDBrUdWGJDso"
    application = Application.builder().token(telegram_token).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.run_polling()

if __name__ == '__main__':
    main()
